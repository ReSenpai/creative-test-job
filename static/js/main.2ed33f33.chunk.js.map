{"version":3,"sources":["api/api.js","helpers/objects_helpers.js","redux/apartaments_reducer.js","redux/apartaments_selectors.js","Apartaments/ApartamentCard.jsx","Apartaments/Apartaments.jsx","Apartaments/ApartamentsContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["simulatedServerResponse","Promise","resolve","setTimeout","data","apartamentsAPI","response","console","error","changeObjToArr","items","itemId","objPropName","newObjProps","map","item","ADD_LIKE","REMOVE_LIKE","initialState","apartaments","likes","isInitialization","setApartaments","type","apartamentsReducer","state","action","userId","liked","getApartamentsData","apartamentsPage","getIsInitialization","getLikes","useStyles","makeStyles","root","maxWidth","width","margin","grid","flexBasis","media","height","ApartamentCard","addLike","removeLike","classes","apartament","Grid","xs","key","id","className","Card","CardActionArea","CardMedia","image","attributes","photo","title","CardContent","Typography","gutterBottom","variant","component","color","area","unit","rooms","address","street","house","room","relationships","first_name","middle_name","CardActions","IconButton","aria-label","onClick","Apartaments","container","spacing","justify","alignItems","direction","style","Badge","badgeContent","position","top","right","zIndex","connect","getApartaments","dispatch","a","useEffect","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2ed33f33.chunk.js","sourcesContent":["import * as data from '../data/entities.json';\r\n// server API simulated\r\nconst simulatedServerResponse = new Promise((resolve) => {\r\n    setTimeout(() => {\r\n        resolve(data.response);\r\n    }, 1000);\r\n})\r\n\r\nexport const apartamentsAPI = {\r\n    async getData () {\r\n        try {\r\n            const response = await simulatedServerResponse;\r\n            return response;\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n}\r\n","export const changeObjToArr = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(item => {\r\n        if(item[objPropName] === itemId) {\r\n            return {\r\n                ...item, \r\n                ...newObjProps\r\n            }\r\n        }\r\n        return item;\r\n    })\r\n}","import { apartamentsAPI } from \"../api/api\";\r\nimport { changeObjToArr } from \"../helpers/objects_helpers\";\r\n\r\nconst GET_APARTAMENTS = 'apartaments/GET_APARTAMENTS';\r\nconst ADD_LIKE = 'apartaments/ADD_LIKE';\r\nconst REMOVE_LIKE = 'apartaments/REMOVE_LIKE';\r\n\r\nlet initialState = {\r\n    apartaments: [],\r\n    likes: 0,\r\n    isInitialization: true\r\n}\r\n// Reducer\r\nconst apartamentsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case GET_APARTAMENTS: {\r\n            return {\r\n                ...state,\r\n                apartaments: [...action.apartaments]\r\n            }\r\n        }\r\n        case ADD_LIKE: {\r\n            return {\r\n                ...state,\r\n                apartaments: changeObjToArr(state.apartaments, action.userId, 'id', { liked: true }),\r\n                likes: state.likes + 1\r\n            }\r\n        }\r\n        case REMOVE_LIKE: {\r\n            return {\r\n                ...state,\r\n                apartaments: changeObjToArr(state.apartaments, action.userId, 'id', { liked: false }),\r\n                likes: state.likes - 1\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }  \r\n}\r\n\r\n// Actions\r\nexport const setApartaments = (apartaments) => ({ type: GET_APARTAMENTS, apartaments });\r\nexport const addLike = (userId) => ({ type: ADD_LIKE, userId });\r\nexport const removeLike = (userId) => ({ type: REMOVE_LIKE, userId });\r\n\r\n// Thunks\r\nexport const getApartaments = () => async (dispatch) => {\r\n    const apartaments = await apartamentsAPI.getData();\r\n    dispatch(setApartaments(apartaments));\r\n}\r\n\r\n\r\nexport default apartamentsReducer;","export const getApartamentsData = (state) => state.apartamentsPage.apartaments;\r\nexport const getIsInitialization = (state) => state.apartamentsPage.isInitialization;\r\nexport const getLikes = (state) => state.apartamentsPage.likes;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n    width: 345,\r\n    margin: 10\r\n  },\r\n  grid: {\r\n    flexBasis: 0\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport default function ApartamentCard({apartaments, addLike, removeLike}) {\r\n  const classes = useStyles();\r\n\r\n  return apartaments.map(apartament => (\r\n    <Grid item xs={12} key={ apartament.id } className={ classes.grid } >\r\n      <Card className={classes.root}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            className={classes.media}\r\n            image={ apartament.attributes.photo }\r\n            title={ apartament.attributes.title }\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              { apartament.attributes.title }\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              Площадь: { apartament.attributes.area } { apartament.attributes.unit }\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              Комнаты: { apartament.attributes.rooms }\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n              Адрес: Улица { apartament.attributes.address.street } Дом { apartament.attributes.address.house } кв. { apartament.attributes.address.room }\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Продавец: { apartament.relationships.attributes.first_name } { apartament.relationships.attributes.middle_name }\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          { apartament.liked \r\n            ? <IconButton color=\"primary\" aria-label=\"add to favorites\" \r\n                onClick={ () => removeLike(apartament.id) }>\r\n                <FavoriteIcon />\r\n              </IconButton> \r\n            : <IconButton aria-label=\"add to favorites\" onClick={ () => addLike(apartament.id) }>\r\n                <FavoriteIcon />\r\n              </IconButton>\r\n          } \r\n        </CardActions>\r\n      </Card>\r\n    </Grid>\r\n  ))\r\n}","import { Grid } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ApartamentCard from './ApartamentCard';\r\n\r\n\r\nconst Apartaments = ({apartaments, addLike, removeLike, likes}) => {\r\n\r\n    return (\r\n        <Grid container spacing={2} justify='center' alignItems='center' direction='column'\r\n            style={{ height: '100vh', width: '100%' }} >\r\n            <Badge badgeContent={ likes } color=\"error\" \r\n                style={{ position: 'fixed', top: '6%', right: '6%', zIndex: '1' }}>\r\n                { likes\r\n                    ? <FavoriteIcon color='primary' />\r\n                    : <FavoriteIcon color='disabled' /> \r\n                }\r\n            </Badge>\r\n            <Grid item>\r\n                <Grid container justify='center'>\r\n                    <ApartamentCard {...{apartaments, addLike, removeLike}} />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Apartaments;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addLike, getApartaments, removeLike } from '../redux/apartaments_reducer';\r\nimport { getApartamentsData, getIsInitialization, getLikes } from '../redux/apartaments_selectors';\r\nimport Apartaments from './Apartaments';\r\n\r\n\r\nconst ApartamentContainer = ({\r\n    apartaments,\r\n    isInitialization,\r\n    likes,\r\n    getApartaments,\r\n    addLike,\r\n    removeLike\r\n}) => {\r\n    useEffect(() => {\r\n        getApartaments();\r\n    }, [isInitialization])\r\n\r\n    return (\r\n        <Apartaments {...{apartaments, addLike, removeLike, likes}} />\r\n    )  \r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    apartaments: getApartamentsData(state),\r\n    isInitialization: getIsInitialization(state),\r\n    likes: getLikes(state)\r\n}) \r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    getApartaments,\r\n    addLike, \r\n    removeLike\r\n})(ApartamentContainer);","import React from 'react';\nimport ApartamentContainer from './Apartaments/ApartamentsContainer';\nimport { apartamentsAPI } from './api/api';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <ApartamentContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport apartamentsReducer from \"./apartaments_reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n   apartamentsPage: apartamentsReducer\r\n});\r\n\r\n\r\nconst store = createStore(rootReducer,  applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'fontsource-roboto';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}